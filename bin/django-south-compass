#!/usr/bin/env python

import os
import re
import sys

from itertools import groupby
from optparse import OptionParser

STATUSES = {
    'A': 'added',
    'D': 'deleted',
    'M': 'modified',
}

DIRECTIONS = {
    'F': 'forward',
    'B': 'backward',
}

CMD, _ = os.path.splitext(os.path.basename(__file__))

def display_status(status):
    return STATUSES.get(status)

def display_direction(direction):
    return DIRECTIONS.get(direction)

class MigrationList(object):

    manage_cmd = 'python manage.py'

    def __init__(self, items=None, options=None):
        self.items = []
        self.options = options

        if items:
            self.items = items
        if self.options.manage:
            self.manage_cmd = 'python %s' % self.options.manage
        if self.options.settings:
            self.manage_cmd += ' %s' % self.options.settings

    def add(self, migration):
        self.items.append(migration)

    def remove(self, migration):
        self.items.remove(migration)

    def plan(self):
        self.items.sort(key=lambda x: (x.app, x.direction, x.migration))
        # TODO: migrate to the last point of the group
        for key, group in groupby(self.items, lambda x: x.app):
            for item in group:
                print item

    def migrate_all(self):
        for item in self.items:
            item.migrate(self.manage_cmd, self.options)
            
        # Need to clean up files that were fetched for migration
        for item in self.items:
            item.clean()
            
            
class Migration(object):

    def __init__(self, app, migration, old, direction="F", prefix=''):
        if not direction in DIRECTIONS.keys():
            raise ValueError('Invalid value for direction')

        self.app = app
        self.migration = migration
        self.old = old
        self.direction = direction
        self.prefix = prefix

        if self.direction == 'B':
            self.migration = str(int(migration.lstrip('0'))-1).zfill(4)

    def __str__(self):
        return 'migrate %s %s to %s' % (self.app,
                display_direction(self.direction),
                self.migration)

    def migrate(self, manage_cmd, options):
        if self.direction == 'B':
            os.system('git checkout %s %s%s/migrations' % (self.old, self.prefix, self.app))
        cmd = 'cat <(echo "yes") - | %s migrate %s %s' % (manage_cmd, self.app, self.migration)
        print cmd
        os.system(cmd)
    
    def clean(self):
        if self.direction == 'B':
            os.system('git reset HEAD %s %s%s/migrations' % (self.old, self.prefix, self.app))
            os.system('git clean -f %s %s%s/migrations' % (self.old, self.prefix, self.app))


def post_checkout(old, new, options):

    migrations = MigrationList(options=options)

    cmd = 'git diff --name-status %s %s | grep /migrations/' % (
        old, new)
    for line in os.popen(cmd).readlines():
        status, filepath = line.split()
        # search for the migration number
        match = re.compile('\w+/migrations/\d+').search(filepath)
        if match:
            app, _, migration = match.group().split('/')
            prefix = filepath.split(app)[0]
            if app and migration:
                if status == 'D':
                    direction = 'B'
                else:
                    direction = 'F'
                migration = Migration(app,
                        migration, old, direction=direction, prefix=prefix)
                migrations.add(migration)

    migrations.plan()
    migrations.migrate_all()

def main():

    parser = OptionParser()

    parser.add_option("-m", "--manage")
    parser.add_option("-s", "--settings")

    options, args = parser.parse_args()

    if len(args) >= 1:
        command = args[0]

        if command == 'post-checkout':
            old = args[1]
            new = args[2]
            flag = args[3]

            if old != new and flag == '1':
                post_checkout(old, new, options)
        elif command == 'install':
            cmd = '%s post-checkout $@' % CMD
            if options.manage:
                cmd += ' --manage %s' % options.manage
            if options.settings:
                cmd += ' --settings %s' % options.settings

            f = file('.git/hooks/post-checkout', 'w')
            f.write('#!/bin/bash\n')
            f.write('\n')
            f.write(cmd)
            f.close()
            os.system('chmod +x .git/hooks/post-checkout')
            print """
            Congrats! Django south compass has been installed to .git/hooks/post-checkout

            Migrations added/deleted during checkout will now be automatically
            synced with the database.

            To uninstall, just edit or delete .git/hooks/post-checkout
            """

        else:
            print 'Use `%s install` to install to current repository' % CMD
    else:
        print 'Use `%s install` to install to current repository' % CMD

if __name__ == '__main__':
    main()
